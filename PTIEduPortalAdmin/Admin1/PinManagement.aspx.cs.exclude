using System;
using System.Collections;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Xml.Linq;
using System.Messaging;
//using Cyberspace.ServiceBrocker;
using System.Security.Cryptography;
using System.Text;//.Security.Cryptography;
using System.Data.SqlClient;


public partial class Admin_PinManagement : System.Web.UI.Page
{
    private static string ID = "";
    private static string UserID = "";
    private static string Group = "";
    //
    private static bool EditON = false;
    private static bool varification = false;

    private static double Max = 0;
    private static double Min = 0;
    private static double TotalRows = 0;
    private static bool processstart = false;
    private static int TotalRec = 0;
    private static string IP = System.Configuration.ConfigurationManager.AppSettings["PinGenerationFeedbackIP"];

    //
    private static string str = ConfigurationManager.AppSettings["conn"];


    private static string PrefixSerial = ConfigurationManager.AppSettings["PrefixSrn"];
    //
    //PinUsersPrefix
    private static string SrialFormat = ConfigurationManager.AppSettings["DigitFormat"];

    private static string Key = ConfigurationManager.AppSettings["CyberKey"];
    private static string patternInt = ConfigurationManager.AppSettings["regexint"];
    //PinExpDateMonth


    private static string PinInfo = ".\\private$\\" + ConfigurationManager.AppSettings["PinInfo"];
    private static string exportheader = "";
    private static string Exportfilename = "";
    private static string GridCaption = "";
    private static int GViewWidth = 0;
    private static string LastSerial = "";
    private static int LastSrn = 0;
    private static string Sql = "";
    private static string PinFormat = "Numeric";
    private static bool PinPreview = false;
    private static Hashtable EncryptPins = null;

    private static CWritetoqueue rq = null;//(CWritetoqueue)Session["user"];
    private static string ActivePersonGroup = "";

    private static string msg = "";
    private static string managerDept = "";
    private static string username = "";



    protected void Page_Load(object sender, EventArgs e)
    {
        ChkBoxPinEncrypt.Checked = true;
        if (Cache[HttpContext.Current.User.Identity.Name] != null)
        {
            ID = HttpContext.Current.User.Identity.Name;
            UserID = ID;
            Group = (string)Cache[HttpContext.Current.User.Identity.Name];
            if (Group.ToLower() != null)
            {

                if (Page.IsPostBack == false)
                {
                    GridView1.DataSource = null;

                    GridView1.DataBind();

                    TxtDigit.Focus();
                    RadioBtnFormat.SelectedIndex = 0;
                    LoadPinType();
                    //populateGridAvail2();
                }
            }
            else
            {

            }

        }

    }

    private void LoadPinType()
    {
        try
        {
            DDListPinType.Items.Clear();
            DDListPinType.Items.Add("Application pin");
            DDListPinType.Items.Add("Clearance pin");            

        }
        catch (Exception ex)
        {

        }
    }
    protected void RadioBtnFormat_Changed(object sender, EventArgs e)
    {
        if (RadioBtnFormat.SelectedItem.Text == "Numeric")
        {
            PinFormat = "Numeric";
        }
        else
        {
            PinFormat = "AlphaNumeric";
        }
    }
    protected void Timer1_Tick(object sender, EventArgs e)
    {
        if (processstart == true)
        {
            //populatetreeview();
            Shoprogress();            
        }
    }

    private void populatetreeview()
    {
        try
        {
            string query = "";// "SELECT [SerialNumber] as [Serial Number],[Pin] as Pins,[GeneratedBy] as [Generated By],[DateGenerated] as [Date Generated] FROM [Pins] where GeneratedBy = '" + ID + "' order by [SerialNumber]";

            if (DDListPinType.Text.Trim().ToLower() == "clearance pin")
            {
                 query = "SELECT [SerialNumber] as [Serial Number],[Pin] as Pins,[GeneratedBy] as [Generated By],[DateGenerated] as [Date Generated] FROM [Forms] where GeneratedBy = '" + ID + "' order by [SerialNumber]";
            }
            else
            {
                 query = "SELECT [SerialNumber] as [Serial Number],[Pin] as Pins,[GeneratedBy] as [Generated By],[DateGenerated] as [Date Generated] FROM [Pins] where GeneratedBy = '" + ID + "' order by [SerialNumber]";
            }
            
            exportheader = "[Serial Number],[Pins],[Generated By],[Date Generated]";
            Exportfilename = DDListPinType.Text.Trim().ToLower();
            GridCaption = DDListPinType.Text.Trim().ToLower();
            GViewWidth = 800;
            populategrdv(query);

        }
        catch (Exception ex)
        {
            msg = ex.Message + "||" + ex.StackTrace;
            //LogError(msg, "Payroll", "");
            showmassage(msg);
        }
    }
    private void populategrdv(string query)
    {
        try
        {
            DataSet ds = new DataSet();
            DataSet ds2 = new DataSet();
            SqlConnection cnn = new SqlConnection(str);
            cnn.Open();

            SqlDataAdapter dat = new SqlDataAdapter(query, cnn);

            dat.Fill(ds);
            if (GViewWidth > 0)
            {
                GridView1.Width = GViewWidth;
            }

            GridView1.DataSource = ds;
            Session["ds2"] = ds;

            GridView1.DataBind();
            //if (ds.Tables[0].Rows.Count > 0)
            //{
            //    formatGridview();
            //}
            GridView1.Caption = GridCaption + ":" + " " + "Total = " + " " + ds.Tables[0].Rows.Count.ToString();
            GridView1.ToolTip = ds.Tables[0].Rows.Count.ToString();
            GridView1.CaptionAlign = TableCaptionAlign.Left;
            //ChequePanelGridv.Visible = true;
        }
        catch (Exception ex)
        {

            msg = ex.Message + "||" + ex.StackTrace.ToString();
            showmassage(msg);
        }

    }
    private void Shoprogress()
    {
        try
        {
            ProgressBarFeedback pf = new ProgressBarFeedback();

            //get staff size
            string update = "";
            //TotalRows = 0;
            update = pf.Getfeedback(IP, "pin", "TotalRows ");

            string[] item1 = update.Split(new char[] { '|' });
            int upp1 = item1.GetUpperBound(0);

            if (upp1 == 0)
            {
                if (item1[0].ToString() != "")
                {
                    TotalRows = double.Parse(item1[0].ToString());
                    Max = TotalRows;
                }

            }

            if (TotalRows > 1)
            {
                Shoprogress2(TotalRows);
            }
            else
            {
                //processstart = false;
                //Timer1.Dispose();
            }
        }
        catch (Exception ex)
        {

        }


    }

    private void Shoprogress2(double max)
    {
        try
        {
            string percent = "";
            double current = 0;
            if (max > 1)
            {

                ProgressBarFeedback pf = new ProgressBarFeedback();

                string update = pf.Getfeedback(IP, "pin", "current");

                string[] item = update.Split(new char[] { '|' });
                int upp = item.GetUpperBound(0);

                if (upp == 0)
                {
                    if (item[0].ToString() != "")
                    {
                        current = double.Parse(item[0].ToString());

                        if (current <= 0)
                        {                            
                            lblProgress.Text = "";
                            processstart = false;
                        }

                        //if (current >= max-1)
                        //{
                        //    processstart = false;
                        //    lblProgress.Text = "";
                        //}

                        double per = (current * 300 / max);
                        percent = per.ToString("0");
                        double step = per / 3;
                        
                        if (per > 5.0)
                        {
                            lblProgress.Text = "complete (" + current.ToString() + " of " + max.ToString() + ")";
                            //lblProgress.Text = lblProgress.Text + "<TABLE cellspacing=0 cellpadding=0 border=1 width="+max+"><TR><TD bgcolor=#000066 width=" + percent1.ToString() + "%>&nbsp;</TD><TD bgcolor=#FFF7CE>&nbsp;</TD></TR></TABLE>";
                            lblProgress.Text = lblProgress.Text + "<TABLE cellspacing=0 cellpadding=0 border=1 width=300><TR><TD bgcolor=#000066 width=" + step.ToString() + "%>&nbsp;</TD><TD bgcolor=#FFF7CE>&nbsp;</TD></TR></TABLE>";
                            lblProgress.Visible = true;
                        }
                    }
                    

                }
                else
                {
                    msg = "Returned status has error";
                    showmassage(msg);
                }
                //}
            }
        }
        catch (Exception ex)
        {
            msg = ex.Message;
            showmassage(msg);
        }
    }
    protected void BtnExport_Click(object sender, EventArgs e)
    {
        //string header = exportheader;
        //string filename = Exportfilename;
        //ExportData(header, filename);msg
        msg = "Go to dispatch page to export";
        showmassage(msg);
        //TxtMsisdn.Focus();
        return;
    }
    private void ExportData(string header, string filename)
    {
        StringBuilder stb = new StringBuilder();
        //cmd = new SqlDataAdapter("select MSISDN,Service_Name as CODE, Operator_ID as NETWORK, Log_Date as LOGDAY,Message_Body As [MESSAGE BODY], GUID from Mg_Transaction where Service_Name in " + shortcode + " and  Direction = 'IN' and Log_Date between '" + txtBeginDate.Text.Trim() + "' and '" + txtEndDate.Text.Trim() + "' order by Log_Date desc", cnn);
        //stb.Append("BANK NAME,BRANCH,ADDRESS,CONTACT PERSON,PHONE,MAIL");
        stb.Append(header);
        stb.AppendLine();
        DataSet ds = new DataSet();

        String msg;
        int j;
        int k;
        int i;
        int m;

        try
        {
            if (Session["ds2"] != null)
            {
                ds = (DataSet)Session["ds2"];
                j = ds.Tables[0].Columns.Count;
                //j = j - 1;
                k = ds.Tables[0].Rows.Count;

                for (i = 0; i < k; i++)
                {
                    for (m = 0; m < j; m++)
                    {
                        if (m == 0)
                        {
                            stb.Append(ds.Tables[0].Rows[i][m].ToString().Replace(",", ";").ToLower().Replace("\r\n", ""));
                        }
                        else
                        {
                            stb.Append("," + ds.Tables[0].Rows[i][m].ToString().Replace(",", ";").ToLower().Replace("\r\n", ""));
                        }

                    }
                    stb.AppendLine();
                }


                Response.Clear();
                Response.AddHeader("content-disposition", "attachment;filename=" + filename + DateTime.Now.ToString("yyyyMMddHHmmss") + ".csv");
                Response.Charset = "";
                Response.Cache.SetCacheability(HttpCacheability.NoCache);
                Response.ContentType = "application/vnd.csv";
                System.IO.StringWriter stringWrite = new System.IO.StringWriter();
                System.Web.UI.HtmlTextWriter htmlWrite = new HtmlTextWriter(stringWrite);
                Response.Write(stb.ToString());
                Response.End();
            }
            else
            {
                msg = "Specify what you want to Export";
                showmassage(msg);
                //TxtMsisdn.Focus();
                return;
            }
        }
        catch (Exception ex)
        {
            msg = ex.Message + "||" + ex.StackTrace;
            //log.Error(msg);
            showmassage(msg);
            return;
        }
    }
    private void showmassage(string message)
    {
        message = message.Replace("'", " ").Replace("\r\n", "");
        MasterPage master = (MasterPage)this.Master;
        master.ClientMessage(this.Page, message);

    }
    private void populateGridAvail2()
    {
        try
        {

            //Sql = "SELECT [Pin],[Status],[UsedBy],[DateUsed],[GeneratedBy],[DateGenerated],[ExpirationDate],ExpirationStatus FROM [Pins]  where Status =0 and [UsedBy]='NONE' order by Pin";
            //exportheader = "[Pin],[Status],[UsedBy],[DateUsed],[GeneratedBy],[DateGenerated],[ExpirationDate],ExpirationStatus";
            //Exportfilename = "SubmittedPins";
            //GridCaption = "Submitted Pins";
            //GViewWidth = 800;
            //populateGridAvail();

        }
        catch (Exception ex)
        {

            msg = ex.Message + "||" + ex.StackTrace.ToString();
            showmassage(msg);
        }
    }
    private void sendtoUploadloadQ(Pins datInfo)
    {
        try
        {
            DefaultPropertiesToSend dfp = new DefaultPropertiesToSend();
            dfp.AttachSenderId = true;
            dfp.Recoverable = true;

            MessageQueue mq;
            if (!MessageQueue.Exists(PinInfo))
            {
                mq = MessageQueue.Create(PinInfo);
                mq.SetPermissions("Everyone", MessageQueueAccessRights.FullControl);

            }
            else
            {
                mq = new MessageQueue(PinInfo);
                mq.Formatter = new XmlMessageFormatter(new Type[] { typeof(Pins) });
                mq.DefaultPropertiesToSend = dfp;
            }

            mq.DefaultPropertiesToSend.Recoverable = true;
            mq.DefaultPropertiesToSend.AttachSenderId = true;
            mq.DefaultPropertiesToSend.Label = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff") + " " + datInfo.PinQty.ToString() + ";" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff");
            mq.Send(datInfo);
            mq.Dispose();
            mq.Close();

        }
        catch (Exception ex)
        {
            msg = ex.Message + "||" + ex.StackTrace.ToString();
            showmassage(msg);
            //log.Error(msg);
        }
    }
    protected void BtnGenerate_Click(object sender, EventArgs e)
    {
        try
        {
            //DDListPinType.Items.Add("Application pin");
            //DDListPinType.Items.Add("Clearance pin");   

            if (DDListPinType.Text.Trim() == "")
            {
                msg = "Please,specify pin type to generate";
                showmassage(msg);
                return;
            }

            if (Group.ToLower().Trim() == "superadmin" || Group.ToLower().Trim() == "admin")
            {
                if(DDListPinType.Text.Trim().ToLower() != "application pin")
                {
                    msg = "You can only generate application pin";
                    showmassage(msg);
                    return;
                }
               
            }

            if (Group.ToLower().Trim() == "cnssuperadmin" || Group.ToLower().Trim() == "cnsadmin")
            {
                if(DDListPinType.Text.Trim().ToLower() != "clearance pin")
                {
                    msg = "You can only generate clearance pin";
                    showmassage(msg);
                    return;
                }
                
            }

            Pins pin = new Pins();

            if (Key == "")
            {
                msg = "Please, provide the encryption key";
                showmassage(msg);
                return;
            }

            long qty1 = 0;
            int qty2 = 0;
            int batchqty = 0;
            if (long.TryParse(TxtQtyTokenGenerated.Text, out qty1) && int.TryParse(TxtDigit.Text, out qty2) && int.TryParse(TxtBatchqty.Text.Trim(), out batchqty))
            {
                if (qty2 > 20)
                {
                    msg = "Digit lenght should not be more than 20";
                    showmassage(msg);
                    return;
                }
                else
                {
                    //Tok = generateTokens(qty2, qty1);

                    pin.Encrypt = "yes";
                    pin.PinBatchNo = "";
                    pin.PinDigits = qty2;
                    pin.PinFormat = PinFormat;
                    pin.PinQty = qty1;
                    pin.Uploader = ID;
                    pin.BatchQty = batchqty;
                    pin.PinType = DDListPinType.Text.Trim();
                    sendtoUploadloadQ(pin);
                    processstart = true;

                    TxtQtyTokenGenerated.Text = "";
                    RadioBtnFormat.SelectedIndex = 0;

                    //populatetreeview();
                    msg = DDListPinType.Text.Trim() +" "+  "generation in progress...";
                    showmassage(msg);
                    return;

                }
            }
            else
            {
                msg = "Enter values in all the fields";
                showmassage(msg);
                return;
            }
            //
            
        }
        catch (Exception ex)
        {
            msg = ex.Message;
            showmassage(msg);
        }
    }

    private Hashtable generateTokens(int Digits, int qty)
    {
        Hashtable arr = new Hashtable();
        ArrayList SortedSrn = new ArrayList();
        int count = 1;

        ////if (SrialFormat == "")
        ////{
        ////    msg = "Enter serial number digit format";
        ////    showmassage(msg);
        ////    return arr;
        ////}
        ////try
        ////{
        ////    //represent count with users
        ////    //1 already added to last user number
        ////    int cnt = getlastuserno();

        ////    if (PinFormat == "Numeric")
        ////    {
        ////        while (count <= qty)
        ////        {
        ////            System.Guid guid = System.Guid.NewGuid();
        ////            string k = "";

        ////            foreach (char c in guid.ToString().ToLower())
        ////            {
        ////                if (c >= 0x30 && c <= 0x39)
        ////                {
        ////                    k = k + c.ToString().ToLower();
        ////                }
        ////                if (k.StartsWith("0"))
        ////                {
        ////                    k = k.Remove(0);
        ////                }
        ////                if (k.Length == Digits)
        ////                {

        ////                    //string UserNUMBER = String.Format("{0:00000}", cnt + count);
        ////                    string UserNUMBER = String.Format("{" + SrialFormat + "}", cnt + count);
        ////                    string Serial = "";// PrefixUserNumb + UserNUMBER;
        ////                    if (PrefixSerial != "")
        ////                    {
        ////                        Serial = PrefixSerial + UserNUMBER;
        ////                    }
        ////                    else
        ////                    {
        ////                        Serial = UserNUMBER;
        ////                    }
        ////                    arr.Add(Serial, k);
        ////                    SortedSrn.Add(cnt + count);
        ////                    count++;
        ////                    break;
        ////                }
        ////            }
        ////        }
        ////    }
        ////    else
        ////    {

        ////        while (count <= qty)
        ////        {
        ////            System.Guid guid = System.Guid.NewGuid();
        ////            string k = "";

        ////            foreach (char c in guid.ToString().ToLower())
        ////            {
        ////                if (c >= 0x30 && c <= 0x39 || c >= 0x61 && c <= 0x7a)
        ////                {
        ////                    k = k + c.ToString().ToLower();

        ////                }

        ////                if (k.StartsWith("0"))
        ////                {
        ////                    k = k.Remove(0);
        ////                }



        ////                if (k.Length == Digits)
        ////                {
        ////                    string UserNUMBER = String.Format("{" + SrialFormat + "}", cnt + count);
        ////                    //string UserNUMBER = String.Format("{0:00000}", cnt + count);

        ////                    string Serial = "";// PrefixUserNumb + UserNUMBER;
        ////                    if (PrefixSerial != "")
        ////                    {
        ////                        Serial = PrefixSerial + UserNUMBER;
        ////                    }
        ////                    else
        ////                    {
        ////                        Serial = UserNUMBER;
        ////                    }
        ////                    arr.Add(Serial, k);
        ////                    SortedSrn.Add(cnt + count);
        ////                    count++;
        ////                    break;
        ////                    ////string UserNUMBER = String.Format("{0:000}", cnt + count);
        ////                    ////string User = PrefixUserNumb + UserNUMBER;
        ////                    //arr.Add(count, k);
        ////                    ////arr.Add(k, count);
        ////                    //count++;
        ////                    //break;

        ////                }
        ////            }
        ////        }
        ////    }
        ////}
        ////catch (Exception ex)
        ////{
        ////    msg = ex.Message + "||" + ex.StackTrace.ToString();
        ////    showmassage(msg);
        ////}
        ////int SortedSrnCnt = 0;
        ////SortedSrn.Sort();
        ////SortedSrnCnt = SortedSrn.Count;
        ////LastSerial = SortedSrn[SortedSrnCnt - 1].ToString();

        return arr;
    }
    protected void BtnRefresh_Click(object sender, EventArgs e)
    {
        populatetreeview();
    }
}
