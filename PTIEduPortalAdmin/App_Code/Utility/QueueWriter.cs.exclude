using System;
using System.Data;
using System.Configuration;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Messaging;
using Cyberspace.ServiceBrocker;
using Cyberspace.Emailpackage;



/// <summary>
/// Summary description for SingleAttribute
/// </summary>
public class QueueWriter
{
	//
    private string CrudQueryPath = "";
    private string EmailPath = "";
    private string AuditLogPath = "";
    private string RawDataPath = "";
    private string msg = "";
    private string SchLevelPromotions = "";
    public QueueWriter()
	{
		//
		// TODO: Add constructor logic here
		//
        CrudQueryPath = ".\\Private$\\" + System.Configuration.ConfigurationManager.AppSettings["Crudqueries"];
        EmailPath = ".\\Private$\\" + System.Configuration.ConfigurationManager.AppSettings["Outgoingmails"];
        AuditLogPath = ".\\Private$\\" + System.Configuration.ConfigurationManager.AppSettings["Auditlog"];
        RawDataPath = ".\\Private$\\" + System.Configuration.ConfigurationManager.AppSettings["RawdataUploader"];
        SchLevelPromotions = ".\\Private$\\" + System.Configuration.ConfigurationManager.AppSettings["SchLevelPromotion"];
        //SchLevelPromotion

	}
    /// <summary>
    /// Write To CRUD Query Queue
    /// </summary>
    /// <param name="sourceClass"></param>
    /// <param name="methodName"></param>
    /// <param name="actionType"></param>
    /// <param name="actionBody"></param>
    /// <returns></returns>
    public  string SendToCrud(string sourceClass, string methodName, string actionType, string actionBody )
    {
            try
            {

                //Package instruction to be sent to a background service that listens to queue
                CSingleAttribute sa = new CSingleAttribute();
                
                sa.SourceApplication = "Eduportal";
                
                sa.SourceClass = sourceClass;
                sa.MethodName = methodName ;
                sa.ActionType = actionType ;
                sa.ActionBody = actionBody;
                sa.DateTime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff");
                // Post to queue
                if (PostRequest(sa) == true)
                {
                    return "true";
                }
                else {
                    return "false" ;
                  
                    
                }
              
            }
            catch ( Exception ex)
            {
                return ex.Message;
            }
            //return "";

    }
    public string SendToCrud(CSingleAttribute cs)
        {
        try
        {

            //Package instruction to be sent to a background service that listens to queue
            //CSingleAttribute sa = new CSingleAttribute();

            //sa.SourceApplication = "Eduportal";

            //sa.SourceClass = sourceClass;
            //sa.MethodName = methodName;
            //sa.ActionType = actionType;
            //sa.ActionBody = actionBody;
            cs.DateTime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff");
            // Post to queue
            if (PostRequest(cs) == true)
            {
                return "true";
            }
            else
            {
                return "false";


            }

        }
        catch (Exception ex)
        {
            return ex.Message;
        }
        //return "";

    }
    public bool SendToEmail(CMail cm)
    {
        bool rtn = false;
        try
        {
            DefaultPropertiesToSend dfp = new DefaultPropertiesToSend();
            dfp.AttachSenderId = true;
            dfp.Recoverable = true;

            MessageQueue mq;
            if (!MessageQueue.Exists(EmailPath))
            {
                mq = MessageQueue.Create(EmailPath);
                mq.SetPermissions("Everyone", MessageQueueAccessRights.FullControl);

            }
            else
            {
                mq = new MessageQueue(EmailPath);
                mq.Formatter = new XmlMessageFormatter(new Type[] { typeof(CMail) });
                mq.DefaultPropertiesToSend = dfp;
            }


            mq.DefaultPropertiesToSend.Recoverable = true;
            mq.DefaultPropertiesToSend.AttachSenderId = true;
            mq.DefaultPropertiesToSend.Label =  cm.Subject.Substring(0,10) + " .... " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff");
            mq.Send(cm);
            mq.Dispose();
            mq.Close();

            rtn = true;
        }
        catch (Exception ex)
        {
            msg = ex.Message + "||" + ex.StackTrace;

           LogError(msg, "Edu Portal", "Send To Email");
           rtn = false;
        }

        //
        return rtn;

    }
    private void LogError(string strMsg, string SourceApp, string SourceMethod)
    {
         
        CPermit cp = new CPermit();
        cp.Direction = strMsg;
        cp.SourceApplication = SourceApp;
        cp.MethodName = SourceMethod;
        cp.MsgType = "ERROR";
        //if (SendToAuditLog(cp))
        //{ } ;
        //rq = new CWritetoqueue();
        //rq.strPath = auditque;
        ////rq.Logonpermit.MsgType=;
        //rq.Writeaudit(cp);
    }
    public bool SendToAuditLog(CWritetoqueue cp)
    {
        bool rtn = false;
        {
            try
            {
               

                DefaultPropertiesToSend dfp = new DefaultPropertiesToSend();
                dfp.AttachSenderId = true;
                dfp.Recoverable = true;

                MessageQueue mq;
                if (!MessageQueue.Exists(AuditLogPath))
                {
                    mq = MessageQueue.Create(AuditLogPath);
                    mq.SetPermissions("Everyone", MessageQueueAccessRights.FullControl);

                }
                else
                {
                    mq = new MessageQueue(AuditLogPath);
                    mq.Formatter = new XmlMessageFormatter(new Type[] { typeof(CWritetoqueue) });
                    mq.DefaultPropertiesToSend = dfp;
                }

                mq.DefaultPropertiesToSend.Recoverable = true;
                mq.DefaultPropertiesToSend.AttachSenderId = true;
                mq.DefaultPropertiesToSend.Label = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff");
                mq.Send(cp);
                mq.Dispose();
                mq.Close();
                rtn = true;
            }
            catch (Exception er)
            {

                string err = er.Message;
                rtn = false;
            }
            return rtn;
        }
    }
    public bool SendToRawData()
    {
        bool rtn = false;
        return rtn;
    }
    private  bool PostRequest(CSingleAttribute sa)
    {
        // Initialise return value to default
        bool rtnvalue = false;
        try
        {           
            
           // SingleAttributePath = ".\\Private$\\SingleAttribute";
            MessageQueue mq = new MessageQueue(CrudQueryPath);
      
            //mq.DefaultPropertiesToSend.Label = sa.ActionBody;
            mq.Send(sa);
            mq.Dispose();
            //Operation complete, set return value to true
            rtnvalue = true;
        }
        catch (Exception ex)
        {

            throw  ex;
            
        }

        return rtnvalue;
    }
    public bool SendToLevelPromo(string ActiveSession)
    {
        bool rtn = false;
        {
            try
            {

                DefaultPropertiesToSend dfp = new DefaultPropertiesToSend();
                dfp.AttachSenderId = true;
                dfp.Recoverable = true;

                MessageQueue mq;
                if (!MessageQueue.Exists(SchLevelPromotions))
                {
                    mq = MessageQueue.Create(SchLevelPromotions);
                    mq.SetPermissions("Everyone", MessageQueueAccessRights.FullControl);

                }
                else
                {
                    mq = new MessageQueue(SchLevelPromotions);
                    mq.Formatter = new XmlMessageFormatter(new Type[] { typeof(string) });
                    mq.DefaultPropertiesToSend = dfp;
                }

                mq.DefaultPropertiesToSend.Recoverable = true;
                mq.DefaultPropertiesToSend.AttachSenderId = true;
                mq.DefaultPropertiesToSend.Label = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff");
                mq.Send(ActiveSession);
                mq.Dispose();
                mq.Close();

                rtn = true;
            }
            catch (Exception er)
            {

                string err = er.Message;
                rtn = false;
            }
            return rtn;
        }
    }
    }

